[{"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/GlobalStyle.ts":"1","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/DataDisplay.tsx":"2","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Button.tsx":"3","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/DropdownField.tsx":"4","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/InputField.tsx":"5","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Overlay.tsx":"6","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/RewardTableHead.tsx":"7","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/RewardItem.tsx":"8","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/RewardForm.tsx":"9","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/RewardOfferings.tsx":"10","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Text.tsx":"11","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/constants/Colors.ts":"12","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/constants/StyledMediaQuery.ts":"13","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/api/data.js":"14","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/layout.tsx":"15","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/page.tsx":"16","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/rewards.tsx":"17","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/store/store.ts":"18","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/ToggleSwitch.tsx":"19","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/types/DefaultRewardData.ts":"20","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/types/RewardData.ts":"21","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/CancelIcon.tsx":"22","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Toast.tsx":"23","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/CheckCircleIcon.tsx":"24","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/ErrorIcon.tsx":"25","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/InformationIcon.tsx":"26","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/DefaultRewardItem.tsx":"27","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/DefaultRewards.tsx":"28","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/EditRewardForm.tsx":"29","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/WebSocketContext.tsx":"30","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/_app.tsx":"31","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/BottomSaveNotice.tsx":"32","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/EditDefaultRewardForm.tsx":"33","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/util/pages/rewards/rewardsFunctions.ts":"34","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/util/pages/rewards/rewardsHooks.ts":"35","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/util/pages/rewards/rewardsState.ts":"36","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/util/pages/rewards/rewardsStyles.ts":"37","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Textarea.tsx":"38","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/MessageCell.tsx":"39","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/messages.tsx":"40"},{"size":2422,"mtime":1694124296382,"results":"41","hashOfConfig":"42"},{"size":446,"mtime":1693747960301,"results":"43","hashOfConfig":"42"},{"size":2919,"mtime":1693935156069,"results":"44","hashOfConfig":"42"},{"size":4819,"mtime":1693935156069,"results":"45","hashOfConfig":"42"},{"size":2381,"mtime":1694124181419,"results":"46","hashOfConfig":"42"},{"size":1137,"mtime":1693935156070,"results":"47","hashOfConfig":"42"},{"size":3600,"mtime":1693747960302,"results":"48","hashOfConfig":"42"},{"size":5830,"mtime":1694102044975,"results":"49","hashOfConfig":"42"},{"size":7705,"mtime":1694102044976,"results":"50","hashOfConfig":"42"},{"size":3772,"mtime":1694102044976,"results":"51","hashOfConfig":"42"},{"size":1120,"mtime":1693597389650,"results":"52","hashOfConfig":"42"},{"size":1836,"mtime":1693747960305,"results":"53","hashOfConfig":"42"},{"size":503,"mtime":1693587672032,"results":"54","hashOfConfig":"42"},{"size":382,"mtime":1693579716342,"results":"55","hashOfConfig":"42"},{"size":435,"mtime":1693747960305,"results":"56","hashOfConfig":"42"},{"size":5869,"mtime":1693583864460,"results":"57","hashOfConfig":"42"},{"size":8555,"mtime":1694115196575,"results":"58","hashOfConfig":"42"},{"size":1466,"mtime":1693977822470,"results":"59","hashOfConfig":"42"},{"size":1610,"mtime":1694042817203,"results":"60","hashOfConfig":"42"},{"size":232,"mtime":1694093963159,"results":"61","hashOfConfig":"42"},{"size":311,"mtime":1694015032098,"results":"62","hashOfConfig":"42"},{"size":2088,"mtime":1693935156072,"results":"63","hashOfConfig":"42"},{"size":5770,"mtime":1694102044974,"results":"64","hashOfConfig":"42"},{"size":2034,"mtime":1693977822468,"results":"65","hashOfConfig":"42"},{"size":2282,"mtime":1693977822469,"results":"66","hashOfConfig":"42"},{"size":2280,"mtime":1693977822469,"results":"67","hashOfConfig":"42"},{"size":6570,"mtime":1694102044974,"results":"68","hashOfConfig":"42"},{"size":3558,"mtime":1694115196575,"results":"69","hashOfConfig":"42"},{"size":8790,"mtime":1694102044976,"results":"70","hashOfConfig":"42"},{"size":737,"mtime":1694127436064,"results":"71","hashOfConfig":"42"},{"size":316,"mtime":1694025445129,"results":"72","hashOfConfig":"42"},{"size":3204,"mtime":1694102044974,"results":"73","hashOfConfig":"42"},{"size":7224,"mtime":1694102044975,"results":"74","hashOfConfig":"42"},{"size":5278,"mtime":1694115196575,"results":"75","hashOfConfig":"42"},{"size":5440,"mtime":1694115196576,"results":"76","hashOfConfig":"42"},{"size":1122,"mtime":1694115196576,"results":"77","hashOfConfig":"42"},{"size":1708,"mtime":1694115196576,"results":"78","hashOfConfig":"42"},{"size":2537,"mtime":1694127546967,"results":"79","hashOfConfig":"42"},{"size":5988,"mtime":1694127215195,"results":"80","hashOfConfig":"42"},{"size":1083,"mtime":1694124684164,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u97d2w",{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/GlobalStyle.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/DataDisplay.tsx",["206"],[],"// components/DataDisplay.tsx\n'use client';\nimport React from 'react';\nimport { useStore } from '../store/store';\n\nfunction DataDisplay() {\n  const { data, fetchData } = useStore();\n\n  React.useEffect(() => {\n    fetchData(); // Fetch data when the component mounts\n  }, []);\n  console.log(data);\n  return (\n    <div>\n      <h2>Data Display</h2>\n      <ul>\n        <li>{data.userid}</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default DataDisplay;","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Button.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/DropdownField.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/InputField.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Overlay.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/RewardTableHead.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/RewardItem.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/RewardForm.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/RewardOfferings.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Text.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/constants/Colors.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/constants/StyledMediaQuery.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/api/data.js",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/layout.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/page.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/rewards.tsx",["207","208","209"],[],"import DataDisplay from '../components/DataDisplay';\nimport Text from '../components/subatomic/Text';\nimport styled from 'styled-components';\nimport StyledMediaQuery from '../constants/StyledMediaQuery';\nimport Button from '../components/atoms/Button';\nimport RewardTableHead from '@/components/atoms/RewardTableHead';\nimport DefaultRewards from '@/components/organism/DefaultRewards';\nimport RewardOfferings from '@/components/organism/RewardOfferings';\nimport Colors from '@/constants/Colors';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Overlay from '@/components/atoms/Overlay';\nimport RewardForm from '@/components/organism/RewardForm';\nimport EditRewardForm from '@/components/organism/EditRewardForm';\nimport EditDefaultRewardForm from '@/components/organism/EditDefaultRewardForm';\nimport GlobalStyle from '../GlobalStyle';\nimport { useStore, AppState } from '../store/store'; // Import your store\nimport { getServers } from 'dns';\nimport { AnimatePresence } from 'framer-motion';\nimport Toast from '@/components/atoms/Toast';\nimport { RewardData }  from '@/types/RewardData';\nimport { DefaultRewardData } from '@/types/DefaultRewardData';\nimport BottomSaveNotice from '@/components/molecules/BottomSaveNotice';\nimport io from \"socket.io-client\";\nimport { useSockets, useRewardToggles, useDefaultRewardToggles, useRewardsHandlers, useBodyScrollLock } from '@/util/pages/rewards/rewardsHooks';\nimport { handleRewardsPendingChange, handleDefaultRewardsPendingChange, handleSaveChanges, handleCancelChangesFunc, fetchDataFromURL } from '@/util/pages/rewards/rewardsFunctions';\nimport { useRewardsState } from '@/util/pages/rewards/rewardsState';\n\nimport { FlexDiv, TitlePlusButton, RewardsPageTitle, RewardOfferingsAndSettings, ButtonWrap } from '@/util/pages/rewards/rewardsStyles';\n\ninterface RewardsProps {\n    rewardsData: RewardData[]; // Replace YourDataTypeHere with the actual type of your rewards data\n    defaultRewardsData: DefaultRewardData[]; // Replace YourDataTypeHere with the actual type of your default rewards data\n    onEditClick?: () => void;  // Make it optional by adding '?'\n    originalRewardToggles: boolean[]; \n}\n\nexport async function getServerSideProps() {\n  try {\n      // Fetch rewards data\n      const rewardsData = await fetchDataFromURL('http://localhost:5000/current-rewards');\n\n      // Fetch reward offerings data\n      const defaultRewardsData = await fetchDataFromURL('http://localhost:5000/current-outbound-rewards');\n\n      // Return the fetched data as props\n      return {\n          props: {\n              rewardsData,\n              defaultRewardsData,\n          },\n      };\n  } catch (error) {\n      console.error('Error fetching data:', error);\n      return {\n          props: {\n              rewardsData: [],\n              defaultRewardsData: [],\n          },\n      };\n  }\n}\n\n\nfunction Rewards({ rewardsData: initialRewardsData, defaultRewardsData: initialDefaultRewardsData }: RewardsProps) {\n  const { \n    data, fetchData, toast, \n    hideToast, showToast \n  } = useStore((state: AppState) => state);\n\n\n  // ========== State Variables ==========\n\nconst {\n  hasPendingChanges, setHasPendingChanges,\n  isOverlayOpen, setIsOverlayOpen,\n  isEditFormOpen, setIsEditFormOpen,\n  selectedReward, setSelectedReward,\n  isEditDefaultFormOpen, setIsEditDefaultFormOpen,\n  selectedDefaultReward, setSelectedDefaultReward,\n} = useRewardsState(initialRewardsData, initialDefaultRewardsData);\n\n\n    const { rewardsData, defaultRewardsData } = useSockets(initialRewardsData, initialDefaultRewardsData);\n    const { originalRewardToggles, currentRewardToggles, setOriginalRewardToggles, setCurrentRewardToggles } = useRewardToggles(rewardsData);\n    const { originalDefaultRewardToggles, currentDefaultRewardToggles, setOriginalDefaultRewardToggles, setCurrentDefaultRewardToggles } = useDefaultRewardToggles(defaultRewardsData);\n\n    const onRewardToggleChange = useCallback((index: number, newValue: boolean) => {\n      handleRewardsPendingChange(\n          index, \n          newValue, \n          currentRewardToggles, \n          originalRewardToggles, \n          setCurrentRewardToggles, \n          setHasPendingChanges\n      );\n  }, [currentRewardToggles, originalRewardToggles]);\n  \n  const onDefaultRewardToggleChange = useCallback((index: number, newValue: boolean) => {\n      handleDefaultRewardsPendingChange(\n          index, \n          newValue, \n          currentDefaultRewardToggles, \n          originalDefaultRewardToggles, \n          setCurrentDefaultRewardToggles, \n          setHasPendingChanges\n      );\n  }, [currentDefaultRewardToggles, originalDefaultRewardToggles]);\n\n  //Overlay\n  const {\n    handleEditClick,\n    handleEditDefaultClick,\n    handleEditFormClose,\n    handleEditDefaultFormClose,\n    openOverlay,\n    closeOverlay\n} = useRewardsHandlers({\n    setIsEditFormOpen,\n    setSelectedReward,\n    setIsEditDefaultFormOpen,\n    setSelectedDefaultReward,\n    setIsOverlayOpen,\n});\n\n\n// ========== Fetching and Updating Data ========== \n\nuseEffect(() => {\n  fetchData();\n}, []);\n\n\n  const saveChanges = () => {\n    handleSaveChanges({\n      rewardsData,\n      currentRewardToggles,\n      defaultRewardsData,\n      currentDefaultRewardToggles,\n      showToast: showToast, // adjust if your store structure is different\n      setOriginalRewardToggles,\n      setOriginalDefaultRewardToggles,\n      setHasPendingChanges\n    });\n  };\n\n  const handleCancelChanges: () => void = () => {\n    handleCancelChangesFunc(\n      setCurrentRewardToggles, \n      originalRewardToggles, \n      setCurrentDefaultRewardToggles, \n      originalDefaultRewardToggles, \n      setHasPendingChanges\n    );\n  };\n  \n    return (\n        <FlexDiv>\n          <AnimatePresence>\n            {hasPendingChanges && (\n              <BottomSaveNotice\n                key=\"bottom-save-notice\"\n                onSave={saveChanges}\n                onCancel={handleCancelChanges}\n              />\n            )}\n          </AnimatePresence>\n            <AnimatePresence>\n            {toast.visible && (\n                <Toast key=\"toast\" />\n            )}\n            </AnimatePresence>\n            <AnimatePresence>\n            { (isOverlayOpen || isEditFormOpen || isEditDefaultFormOpen) && <Overlay />}\n            </AnimatePresence>\n            <AnimatePresence>\n                {isOverlayOpen && <RewardForm onClose={closeOverlay} />}\n            </AnimatePresence>\n            <AnimatePresence>\n            {isEditFormOpen && selectedReward && (\n                <EditRewardForm\n                    {...selectedReward}\n                    rewardCost={selectedReward.rewardCost.toString()}\n                    onClose={handleEditFormClose}\n                />\n            )}\n            </AnimatePresence>\n            <AnimatePresence>\n            {isEditDefaultFormOpen && selectedDefaultReward && (\n                <EditDefaultRewardForm\n                    {...selectedDefaultReward}\n                    defaultRewardValue={selectedDefaultReward.rewardValue.toString()}\n                    onClose={handleEditDefaultFormClose}\n                />\n            )}\n            </AnimatePresence>\n            <GlobalStyle />\n            <TitlePlusButton>\n            <RewardsPageTitle>\n                <Text text='Rewards' />\n            </RewardsPageTitle>\n            <ButtonWrap>\n            <Button\n                buttonTypeVariant='primary'\n                sizeVariant='large'\n                label='Add Reward'\n                buttonWidthVariant='fill'\n                onClick={openOverlay}\n            />\n            </ButtonWrap>\n            </TitlePlusButton>\n                <RewardOfferingsAndSettings>\n                    <RewardOfferings \n                      rewardsData={rewardsData} \n                      onPendingChange={onRewardToggleChange} \n                      originalRewardToggles={originalRewardToggles} \n                      currentRewardToggles={currentRewardToggles}\n                      onEditClick={handleEditClick} \n                    />\n                    <DefaultRewards \n                      defaultRewardsData={defaultRewardsData} \n                      onDefaultRewardsPendingChange={onDefaultRewardToggleChange} \n                      originalDefaultRewardToggles={originalDefaultRewardToggles} \n                      currentDefaultRewardToggles={currentDefaultRewardToggles}\n                      onEditClick={handleEditDefaultClick} \n                    />\n                </RewardOfferingsAndSettings>\n        </FlexDiv>\n    );\n}\n\nexport default Rewards;","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/store/store.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/ToggleSwitch.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/types/DefaultRewardData.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/types/RewardData.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/CancelIcon.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Toast.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/CheckCircleIcon.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/ErrorIcon.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/InformationIcon.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/DefaultRewardItem.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/DefaultRewards.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/EditRewardForm.tsx",["210"],[],"// components/RewardForm.tsx\nimport React, { useState, useEffect } from 'react';\nimport InputField from '../atoms/InputField';\nimport DropdownField from '../atoms/DropdownField';\nimport Text from '../subatomic/Text';\nimport Button from '../atoms/Button';\nimport { styled } from 'styled-components';\nimport StyledMediaQuery from '../../constants/StyledMediaQuery';\nimport Colors from '../../constants/Colors';\nimport { CancelIcon } from '../subatomic/Icons/CancelIcon';\nimport { motion } from 'framer-motion';\nimport { useStore, AppState } from '../../store/store'; // Import your store\nimport { on } from 'events';\n\n\ntype EditRewardFormProps = {\n    // Define your types here\n    _id: string;\n    id: number;\n    rewardName: string;\n    rewardValue: string;\n    rewardCost: string;\n    rewardTerms: string;\n    rewardActive: boolean;\n    rewardid: string;\n    index: number;\n    onClose: () => void;\n  };\n\n  \n  const ModalCloseButton = styled.div`\n      @media ${StyledMediaQuery.XS} {\n        display: flex;\n        position: absolute;\n        top: 20px;\n        right: 20px;\n        z-index: 1000;\n  \n          svg {\n            width: 48px;\n            height: 48px;\n          }\n      }\n  \n      @media ${StyledMediaQuery.S} {\n        top: 24px;\n        right: 24px;\n  \n          svg {\n            width: 64px;\n            height: 64px;\n          }\n      }\n  `\n  \n  const RewardFormDiv =  motion(styled.div`\n      @media ${StyledMediaQuery.XS} {\n        position: fixed;\n        right: 0;\n        top: 0;\n        display: flex;\n        width: 280px;\n        height: 100vh;\n        background: ${Colors.shades100};\n        flex-direction: column;\n        align-items: flex-start;\n        flex-shrink: 0;\n        z-index: 900;\n      }\n  \n      @media ${StyledMediaQuery.S} {\n          width: 400px;\n      }\n  `)\n  \n  const RewardFormContent = styled.div`\n      @media ${StyledMediaQuery.XS} {\n          display: flex;\n          flex-direction: column;\n          gap: 24px;\n          width: 100%;\n          padding: 88px 16px 16px 16px;\n          box-sizing: border-box;\n          overflow-y: auto;\n          max-height: 100vh - 96px;\n      }\n  \n      @media ${StyledMediaQuery.S} {\n        padding: 120px 24px 24px 24px;\n      }\n  `\n  \n  const RewardFormHeading = styled.div`\n      @media ${StyledMediaQuery.XS} {\n          display: flex;\n          color: ${Colors.neutral700};\n  \n          p {\n            font-size: 24px;\n            font-weight: 800;\n            line-height: 29px;\n          }\n      }\n  \n      @media ${StyledMediaQuery.S} {\n          p {\n            font-size: 32px;\n            line-height: 39px;\n          }\n      }\n  `\n  \n  const FormAndButton = styled.div`\n      @media ${StyledMediaQuery.XS} {\n        display: flex;\n        width: 100%;\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 16px;\n        align-self: stretch;\n  \n        form {\n          display: flex;\n          gap: 24px;\n          width: 100%;\n        }\n      }\n  `\n  \n  const RequiredLabel = styled.div`\n      @media ${StyledMediaQuery.XS} {\n        display: flex;\n        align-items: flex-start;\n        gap: 4px;\n        color: ${Colors.error500};\n  \n        p {\n          font-size: 16px;\n        }\n  \n        h6 {\n          font-size: 14px;\n          font-weight: 500;\n        }\n      }\n  `\n  \n  const FormFields = styled.div`\n      @media ${StyledMediaQuery.XS} {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 16px;\n        width: 100%;\n      }\n  `\n  \n  const EditRewardForm: React.FC<EditRewardFormProps> = ({\n    onClose,\n    _id,\n    id,\n    rewardName,\n    rewardValue,\n    rewardCost,\n    rewardTerms,\n    rewardActive,\n    rewardid,\n    index\n  }) => {\n    const [newRewardName, setNewRewardName] = useState<string>(rewardName);\n    const [newRewardValue, setNewRewardValue] = useState<string>(rewardValue);\n    const [newRewardCost, setNewRewardCost] = useState<string>(rewardCost); // Change this to string\n    const [newRewardTerms, setNewRewardTerms] = useState<string>(rewardTerms);\n    const [hasChanged, setHasChanged] = useState<boolean>(false);\n    const [fieldsValid, setFieldsValid] = useState<boolean>(true);\n  \n    const { showToast } = useStore((state: AppState) => ({ showToast: state.showToast }));\n\n    useEffect(() => {\n      checkForChanges();\n  }, [newRewardName, newRewardValue, newRewardCost, newRewardTerms]);\n\n  const checkForChanges = () => {\n    if (\n        newRewardName !== rewardName ||\n        newRewardValue !== rewardValue ||\n        newRewardCost !== rewardCost ||\n        newRewardTerms !== rewardTerms\n    ) {\n        setHasChanged(true);\n    } else {\n        setHasChanged(false);\n    }\n\n    if (\n        newRewardName.trim() === \"\" ||\n        newRewardValue.trim() === \"\" ||\n        newRewardCost.trim() === \"\" // Add any other required field checks here\n    ) {\n        setFieldsValid(false);\n    } else {\n        setFieldsValid(true);\n    }\n};\n  \n    const handleUpdate = async (e: React.FormEvent) => {\n      e.preventDefault();\n      // Get global state data\n      const { data } = useStore.getState(); // Directly access Zustand state\n      console.log(data)\n    \n      const finalRewardCost = parseFloat(newRewardCost);\n  \n      const payload = {\n        rewardDetails: {\n          name: newRewardName,\n          cost: finalRewardCost,\n          terms: newRewardTerms,\n          value: newRewardValue,\n          id: rewardid,\n          active: rewardActive\n        },\n        // Include any other relevant data\n        user: data\n      };\n  \n      try {\n        const response = await fetch('http://localhost:5000/update-reward', {\n          method: 'PUT',  // Typically, updates are done via PUT\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(payload),\n        });\n  \n        if (response.ok) {\n          const updatedReward = await response.json();\n          showToast('Reward updated successfully!', 'success');\n          // Additional logic here (e.g., close the form, refresh rewards list, etc.)\n        } else {\n          showToast('Failed to update reward.', 'error');\n        }\n      } catch (error) {\n        showToast('Error: Something went wrong!', 'error');\n      }\n  \n      onClose();\n    };\n  \n    // The part where the JSX is returned\nreturn (\n    <RewardFormDiv\n      initial={{ x: \"100%\" }}  // initial state (hidden to the right)\n      animate={{ x: \"0%\" }}  // end state (appears from the right)\n      exit={{ x: \"100%\" }}  // exit state (disappears to the right)\n      transition={{ duration: 0.4, ease: [0.88, 0, 0.16, 1] }} // animation takes 400ms with easeInOut easing\n    >\n      <ModalCloseButton onClick={onClose}>\n        <CancelIcon fill={Colors.neutral700} />\n      </ModalCloseButton>\n      <RewardFormContent>\n        <RewardFormHeading>\n          <Text text=\"Edit Reward\" />\n        </RewardFormHeading>\n        <FormAndButton>\n          <RequiredLabel>\n            <Text text=\"*\" color={Colors.error500} />\n            <h6>Required</h6>\n          </RequiredLabel>\n          <form onSubmit={handleUpdate}>\n            <FormFields>\n              <InputField\n                label=\"Reward Name\"\n                value={newRewardName}\n                onChange={(value) => setNewRewardName(value)}\n                required={true}\n                placeholder='Ex: Hamburger'\n              />\n            <InputField\n                label=\"Reward Cost\"\n                value={newRewardCost.toString()}  // Convert the number to a string for the input\n                onChange={(value) => setNewRewardCost(value)}  // Convert the string back to a number when updating the state\n                required={true}\n                placeholder='Ex: 10'\n            />\n              <DropdownField \n                value={newRewardValue} \n                onChange={(value) => setNewRewardValue(value)}\n                label=\"Reward Value\" \n                useDefaultDropdown={false} \n                required={true}\n              />\n              <InputField\n                label=\"Reward Terms\"\n                value={newRewardTerms}\n                onChange={(value) => setNewRewardTerms(value)}\n                placeholder='Ex: Need 10 stars for this'\n              />\n            </FormFields>\n            <Button\n              buttonTypeVariant={hasChanged && fieldsValid ? 'primary' : 'disabled'}\n              sizeVariant='large'\n              label='Update'\n              buttonWidthVariant='fill'\n              onClick={handleUpdate}\n              type='submit'\n              disabled={!hasChanged || !fieldsValid}\n          />\n          </form>\n        </FormAndButton>\n      </RewardFormContent>\n    </RewardFormDiv>\n  );\n  };\n  \n  export default EditRewardForm;","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/WebSocketContext.tsx",["211"],[],"import React, { createContext, useContext, useEffect, ReactNode } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\ninterface WebSocketContextProps {\n  socket: Socket;\n}\n\ninterface WebSocketProviderProps {\n  children: ReactNode;\n}\n\nconst WebSocketContext = createContext<WebSocketContextProps | null>(null);\n\nexport const useWebSocket = () => {\n  return useContext(WebSocketContext);\n};\n\nexport const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ children }) => {\n  const socket = io('http://localhost:5000');\n\n  useEffect(() => {\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  return (\n    <WebSocketContext.Provider value={{ socket }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/_app.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/BottomSaveNotice.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/EditDefaultRewardForm.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/util/pages/rewards/rewardsFunctions.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/util/pages/rewards/rewardsHooks.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/util/pages/rewards/rewardsState.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/util/pages/rewards/rewardsStyles.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Textarea.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/MessageCell.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/messages.tsx",[],[],{"ruleId":"212","severity":1,"message":"213","line":11,"column":6,"nodeType":"214","endLine":11,"endColumn":8,"suggestions":"215"},{"ruleId":"212","severity":1,"message":"216","line":96,"column":6,"nodeType":"214","endLine":96,"endColumn":51,"suggestions":"217"},{"ruleId":"212","severity":1,"message":"218","line":107,"column":6,"nodeType":"214","endLine":107,"endColumn":65,"suggestions":"219"},{"ruleId":"212","severity":1,"message":"220","line":130,"column":4,"nodeType":"214","endLine":130,"endColumn":6,"suggestions":"221"},{"ruleId":"212","severity":1,"message":"222","line":181,"column":6,"nodeType":"214","endLine":181,"endColumn":68,"suggestions":"223"},{"ruleId":"212","severity":1,"message":"224","line":25,"column":6,"nodeType":"214","endLine":25,"endColumn":8,"suggestions":"225"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["226"],"React Hook useCallback has missing dependencies: 'setCurrentRewardToggles' and 'setHasPendingChanges'. Either include them or remove the dependency array.",["227"],"React Hook useCallback has missing dependencies: 'setCurrentDefaultRewardToggles' and 'setHasPendingChanges'. Either include them or remove the dependency array.",["228"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["229"],"React Hook useEffect has a missing dependency: 'checkForChanges'. Either include it or remove the dependency array.",["230"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["231"],{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"232","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},"Update the dependencies array to be: [fetchData]",{"range":"243","text":"244"},"Update the dependencies array to be: [currentRewardToggles, originalRewardToggles, setCurrentRewardToggles, setHasPendingChanges]",{"range":"245","text":"246"},"Update the dependencies array to be: [currentDefaultRewardToggles, originalDefaultRewardToggles, setCurrentDefaultRewardToggles, setHasPendingChanges]",{"range":"247","text":"248"},{"range":"249","text":"244"},"Update the dependencies array to be: [newRewardName, newRewardValue, newRewardCost, newRewardTerms, checkForChanges]",{"range":"250","text":"251"},"Update the dependencies array to be: [socket]",{"range":"252","text":"253"},[271,273],"[fetchData]",[4201,4246],"[currentRewardToggles, originalRewardToggles, setCurrentRewardToggles, setHasPendingChanges]",[4591,4650],"[currentDefaultRewardToggles, originalDefaultRewardToggles, setCurrentDefaultRewardToggles, setHasPendingChanges]",[5065,5067],[4357,4419],"[newRewardName, newRewardValue, newRewardCost, newRewardTerms, checkForChanges]",[612,614],"[socket]"]