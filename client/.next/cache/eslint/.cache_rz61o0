[{"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/GlobalStyle.ts":"1","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/DataDisplay.tsx":"2","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Button.tsx":"3","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/DropdownField.tsx":"4","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/InputField.tsx":"5","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Overlay.tsx":"6","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/RewardTableHead.tsx":"7","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/RewardItem.tsx":"8","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/RewardForm.tsx":"9","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/RewardOfferings.tsx":"10","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Text.tsx":"11","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/constants/Colors.ts":"12","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/constants/StyledMediaQuery.ts":"13","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/api/data.js":"14","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/layout.tsx":"15","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/page.tsx":"16","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/rewards.tsx":"17","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/store/store.ts":"18","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/ToggleSwitch.tsx":"19","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/types/DefaultRewardData.ts":"20","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/types/RewardData.ts":"21","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/CancelIcon.tsx":"22","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Toast.tsx":"23","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/CheckCircleIcon.tsx":"24","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/ErrorIcon.tsx":"25","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/InformationIcon.tsx":"26","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/DefaultRewardItem.tsx":"27","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/DefaultRewards.tsx":"28","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/EditRewardForm.tsx":"29","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/WebSocketContext.tsx":"30","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/_app.tsx":"31","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/BottomSaveNotice.tsx":"32"},{"size":1804,"mtime":1693935156069,"results":"33","hashOfConfig":"34"},{"size":446,"mtime":1693747960301,"results":"35","hashOfConfig":"34"},{"size":2919,"mtime":1693935156069,"results":"36","hashOfConfig":"34"},{"size":4819,"mtime":1693935156069,"results":"37","hashOfConfig":"34"},{"size":2414,"mtime":1693935156070,"results":"38","hashOfConfig":"34"},{"size":1137,"mtime":1693935156070,"results":"39","hashOfConfig":"34"},{"size":3600,"mtime":1693747960302,"results":"40","hashOfConfig":"34"},{"size":5505,"mtime":1694028554984,"results":"41","hashOfConfig":"34"},{"size":7708,"mtime":1693977822468,"results":"42","hashOfConfig":"34"},{"size":3707,"mtime":1694015032097,"results":"43","hashOfConfig":"34"},{"size":1120,"mtime":1693597389650,"results":"44","hashOfConfig":"34"},{"size":1836,"mtime":1693747960305,"results":"45","hashOfConfig":"34"},{"size":503,"mtime":1693587672032,"results":"46","hashOfConfig":"34"},{"size":382,"mtime":1693579716342,"results":"47","hashOfConfig":"34"},{"size":435,"mtime":1693747960305,"results":"48","hashOfConfig":"34"},{"size":5869,"mtime":1693583864460,"results":"49","hashOfConfig":"34"},{"size":12227,"mtime":1694030596757,"results":"50","hashOfConfig":"34"},{"size":1466,"mtime":1693977822470,"results":"51","hashOfConfig":"34"},{"size":1610,"mtime":1693935156070,"results":"52","hashOfConfig":"34"},{"size":204,"mtime":1694000445979,"results":"53","hashOfConfig":"34"},{"size":311,"mtime":1694015032098,"results":"54","hashOfConfig":"34"},{"size":2088,"mtime":1693935156072,"results":"55","hashOfConfig":"34"},{"size":5773,"mtime":1694031359416,"results":"56","hashOfConfig":"34"},{"size":2034,"mtime":1693977822468,"results":"57","hashOfConfig":"34"},{"size":2282,"mtime":1693977822469,"results":"58","hashOfConfig":"34"},{"size":2280,"mtime":1693977822469,"results":"59","hashOfConfig":"34"},{"size":4841,"mtime":1694000445975,"results":"60","hashOfConfig":"34"},{"size":3279,"mtime":1694025545378,"results":"61","hashOfConfig":"34"},{"size":7942,"mtime":1694025445129,"results":"62","hashOfConfig":"34"},{"size":737,"mtime":1694025445128,"results":"63","hashOfConfig":"34"},{"size":316,"mtime":1694025445129,"results":"64","hashOfConfig":"34"},{"size":3207,"mtime":1694031516246,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u97d2w",{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/GlobalStyle.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/DataDisplay.tsx",["165"],[],"// components/DataDisplay.tsx\n'use client';\nimport React from 'react';\nimport { useStore } from '../store/store';\n\nfunction DataDisplay() {\n  const { data, fetchData } = useStore();\n\n  React.useEffect(() => {\n    fetchData(); // Fetch data when the component mounts\n  }, []);\n  console.log(data);\n  return (\n    <div>\n      <h2>Data Display</h2>\n      <ul>\n        <li>{data.userid}</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default DataDisplay;","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Button.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/DropdownField.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/InputField.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Overlay.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/RewardTableHead.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/RewardItem.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/RewardForm.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/RewardOfferings.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Text.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/constants/Colors.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/constants/StyledMediaQuery.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/api/data.js",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/layout.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/page.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/rewards.tsx",["166"],[],"import DataDisplay from '../components/DataDisplay';\nimport Text from '../components/subatomic/Text';\nimport styled from 'styled-components';\nimport StyledMediaQuery from '../constants/StyledMediaQuery';\nimport Button from '../components/atoms/Button';\nimport RewardTableHead from '@/components/atoms/RewardTableHead';\nimport DefaultRewards from '@/components/organism/DefaultRewards';\nimport RewardOfferings from '@/components/organism/RewardOfferings';\nimport Colors from '@/constants/Colors';\nimport React, { useState, useEffect } from 'react';\nimport Overlay from '@/components/atoms/Overlay';\nimport RewardForm from '@/components/organism/RewardForm';\nimport EditRewardForm from '@/components/organism/EditRewardForm';\nimport GlobalStyle from '../GlobalStyle';\nimport { useStore, AppState } from '../store/store'; // Import your store\nimport { getServers } from 'dns';\nimport { AnimatePresence } from 'framer-motion';\nimport Toast from '@/components/atoms/Toast';\nimport { RewardData }  from '@/types/RewardData';\nimport { DefaultRewardData } from '@/types/DefaultRewardData';\nimport BottomSaveNotice from '@/components/molecules/BottomSaveNotice';\nimport io from \"socket.io-client\";\n\ninterface RewardsProps {\n    rewardsData: RewardData[]; // Replace YourDataTypeHere with the actual type of your rewards data\n    defaultRewardsData: DefaultRewardData[]; // Replace YourDataTypeHere with the actual type of your default rewards data\n    onEditClick?: () => void;  // Make it optional by adding '?'\n    originalRewardToggles: boolean[]; \n}\n\n\nconst FlexDiv = styled.div`\n@media ${StyledMediaQuery.XS} {\n    display: flex;\n    gap: 40px;\n    flex-direction: column;\n    padding: 24px 16px;\n    width: 100vw;\n    box-sizing: border-box;\n    background: ${Colors.primary100};\n}\n`\n\nconst TitlePlusButton = styled.div`\n    @media ${StyledMediaQuery.XS} {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 32px;\n    }\n\n    @media ${StyledMediaQuery.S} {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n    }\n`\n\nconst RewardsPageTitle = styled.div`\n @media ${StyledMediaQuery.XS} {\n    display: flex;\n    color: ${Colors.neutral700};\n    p {\n        font-size: 32px;\n        line-height: 39px;\n        font-weight: 800;\n    }\n }\n\n @media ${StyledMediaQuery.S} {\n    display: flex;\n    color: ${Colors.neutral700};\n    p {\n        font-size: 40px;\n        line-height: 48px;\n    }\n }\n\n @media ${StyledMediaQuery.L} {\n    display: flex;\n    color: ${Colors.neutral700};\n    p {\n        font-size: 48px;\n        line-height: 58px;\n    }\n }\n`\n\nconst RewardOfferingsAndSettings = styled.div`\n @media ${StyledMediaQuery.XS} {\n        display: flex;\n        flex-direction: column;\n        gap: 64px;\n }\n`\n\nconst ButtonWrap = styled.div`\n@media ${StyledMediaQuery.XS} {\n    display: flex;\n    width: 100%;\n   \n}\n\n @media ${StyledMediaQuery.S} {\n    width: auto;\n    align-self: flex-start;\n  }\n`\n\n\nexport async function getServerSideProps() {\n    try {\n        // Fetch rewards data\n        const response1 = await fetch('http://localhost:5000/current-rewards');\n        if (!response1.ok) {\n            throw new Error('Network response was not ok');\n        }\n        const rewardsData = await response1.json();\n\n        // Fetch reward offerings data\n        const response2 = await fetch('http://localhost:5000/current-outbound-rewards');\n        if (!response2.ok) {\n            throw new Error('Network response was not ok');\n        }\n        const defaultRewardsData = await response2.json();\n\n        // Return the fetched data as props\n        return {\n            props: {\n                rewardsData,\n                defaultRewardsData,\n            },\n        };\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            props: {\n                rewardsData: [],\n                defaultRewardsData: [],\n            },\n        };\n    }\n}\n\n\nfunction useBodyScrollLock(isLocked: boolean) {\n    useEffect(() => {\n      if (isLocked) {\n        document.body.style.overflowY = 'hidden';\n      } else {\n        document.body.style.overflowY = 'auto';\n      }\n  \n      return () => {\n        document.body.style.overflowY = 'auto';\n      };\n    }, [isLocked]);\n  }\n\n\nfunction Rewards({ rewardsData: initialRewardsData, defaultRewardsData }: RewardsProps) {\n    const { data, fetchData, toast, hideToast, showToast } = useStore((state: AppState) => ({\n        data: state.data,\n        fetchData: state.fetchData,\n        toast: state.toast,\n        hideToast: state.hideToast,\n        showToast: state.showToast\n      }));\n\n    const [hasPendingChanges, setHasPendingChanges] = useState(false);\n    const [originalRewardToggles, setOriginalRewardToggles] = useState<boolean[]>([]);\n    const [currentRewardToggles, setCurrentRewardToggles] = useState<boolean[]>([]);\n    const [originalDefaultRewardsToggles, setOriginalDefaultRewardsToggles] = useState<boolean[]>([]);\n    const [currentDefaultRewardsToggles, setCurrentDefaultRewardsToggles] = useState<boolean[]>([]);\n    const [isOverlayOpen, setIsOverlayOpen] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isLoading2, setIsLoading2] = useState(true);\n    useBodyScrollLock(isOverlayOpen);\n\n    const [isEditFormOpen, setIsEditFormOpen] = useState(false); // New state for form visibility\n    const [selectedReward, setSelectedReward] = useState<RewardData | null>(null);\n\n    const [rewardsData, setRewardsData] = useState(initialRewardsData);\n\n\n    useEffect(() => {\n      console.log(\"Setting up socket connection.\");\n      const socket = io(\"http://localhost:5000\");\n    \n      // Listen for 'reward-updated' events\n      socket.on(\"reward-updated\", (updatedReward) => {\n        // Update the rewardsData state here\n        console.log(updatedReward)\n        const updatedRewardsData = rewardsData.map((reward) => {\n          if (reward.rewardid === updatedReward.rewardid) {\n            return updatedReward;\n          }\n          return reward;\n        });\n        setRewardsData(updatedRewardsData);\n      });\n\n      socket.on(\"disconnect\", () => {\n        console.log(\"Disconnected from the server\");\n      });\n    \n      return () => {\n        // Cleanup: Disconnect socket when component is unmounted\n        socket.disconnect();\n      };\n  }, [rewardsData]);\n\n\n    useEffect(() => {\n        setOriginalRewardToggles(rewardsData.map((reward) => reward.rewardActive));\n        setCurrentRewardToggles(rewardsData.map((reward) => reward.rewardActive));\n      }, [rewardsData]);\n\n    useEffect(() => {\n    setOriginalDefaultRewardsToggles(defaultRewardsData.map((defaultReward) => defaultReward.rewardActive));\n    setCurrentDefaultRewardsToggles(defaultRewardsData.map((defaultReward) => defaultReward.rewardActive));\n    }, [defaultRewardsData]);\n\n      const handleRewardsPendingChange = (index: number, newValue: boolean) => {\n        const newCurrentToggles = [...currentRewardToggles];\n        newCurrentToggles[index] = newValue;\n        setCurrentRewardToggles(newCurrentToggles);\n        setHasPendingChanges(!originalRewardToggles.every((val, i) => val === newCurrentToggles[i]));\n      };\n\n      const handleDefaultRewardsPendingChange = (index: number, newValue: boolean) => {\n        const newcurrentDefaultRewardsToggles = [...currentDefaultRewardsToggles];\n        newcurrentDefaultRewardsToggles[index] = newValue;\n        setCurrentDefaultRewardsToggles(newcurrentDefaultRewardsToggles);\n        setHasPendingChanges(!originalDefaultRewardsToggles.every((val, i) => val === newcurrentDefaultRewardsToggles[i]));\n      };\n\n\n    const handleEditClick = (reward: RewardData) => {\n    setSelectedReward(reward);\n    setIsEditFormOpen(true);\n    };\n\n    const handleEditFormClose = () => {\n        setIsOverlayOpen(false);\n        setIsEditFormOpen(false);\n        setSelectedReward(null);\n      };\n\n    const handleOverlayOpen = () => {\n        setIsOverlayOpen(true);\n      };\n\n    const handleOverlayClose = () => {\n      setIsOverlayOpen(false);\n    };\n\n    \n   // Initialize the store on the client side\n   useEffect(() => {\n    fetchData();\n}, []);\n\nasync function handleSaveChanges() {\n    const updatedRewardsData = rewardsData.map((reward, index) => ({\n      ...reward,\n      rewardActive: currentRewardToggles[index]\n    }));\n  \n    const updatedDefaultRewardsData = defaultRewardsData.map((defaultReward, index) => ({\n      ...defaultReward,\n      rewardActive: currentDefaultRewardsToggles[index]\n    }));\n  \n    const payload = {\n      updatedRewards: updatedRewardsData,\n      updatedDefaultRewards: updatedDefaultRewardsData\n    };\n  \n    console.log(`Sending updated data: ${JSON.stringify(payload)}`);\n  \n    try {\n      const response = await fetch('http://localhost:5000/update-active-rewards', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload)\n      });\n  \n      if (response.ok) {\n        console.log('Successfully updated rewards and default rewards');\n        showToast('Successfully updated rewards!', 'success'); // Added toast message\n        setOriginalRewardToggles(currentRewardToggles);\n        setOriginalDefaultRewardsToggles(currentDefaultRewardsToggles);\n        setHasPendingChanges(false);\n      } else {\n        console.log('Failed to update rewards.');\n        showToast('Failed to update rewards.', 'error');\n      }\n    } catch (error) {\n      console.error('Error updating rewards:', error);\n      showToast('Error updating rewards.', 'error');\n    }\n  }\n\n  const handleCancelChanges: () => void = () => {\n    // Step 1: Reset Reward Toggles\n    setCurrentRewardToggles([...originalRewardToggles]);\n  \n    // Step 2: Reset Default Reward Toggles\n    setCurrentDefaultRewardsToggles([...originalDefaultRewardsToggles]);\n  \n    // Step 3: Reset the hasPendingChanges flag\n    setHasPendingChanges(false);\n  };\n  \n    const storeData = useStore.getState(); // Get the current state of the store\n    console.log('Store Data:', storeData); // Log the entire store data\n\n    return (\n        <FlexDiv>\n          <AnimatePresence>\n            {hasPendingChanges && (\n              <BottomSaveNotice\n                key=\"bottom-save-notice\"\n                onSave={handleSaveChanges}\n                onCancel={handleCancelChanges}\n              />\n            )}\n          </AnimatePresence>\n            <AnimatePresence>\n            {toast.visible && (\n                <Toast key=\"toast\" />\n            )}\n            </AnimatePresence>\n            <AnimatePresence>\n            { (isOverlayOpen || isEditFormOpen) && <Overlay />}\n            </AnimatePresence>\n            <AnimatePresence>\n                {isOverlayOpen && <RewardForm onClose={handleOverlayClose} />}\n            </AnimatePresence>\n            <AnimatePresence>\n            {isEditFormOpen && selectedReward && (\n                <EditRewardForm\n                    {...selectedReward}\n                    rewardCost={selectedReward.rewardCost.toString()}\n                    onClose={handleEditFormClose}\n                />\n            )}\n            </AnimatePresence>\n            <GlobalStyle />\n            <TitlePlusButton>\n            <RewardsPageTitle>\n                <Text text='Rewards' />\n            </RewardsPageTitle>\n            <ButtonWrap>\n            <Button\n                buttonTypeVariant='primary'\n                sizeVariant='large'\n                label='Add Reward'\n                buttonWidthVariant='fill'\n                onClick={handleOverlayOpen}\n            />\n            </ButtonWrap>\n            </TitlePlusButton>\n                <RewardOfferingsAndSettings>\n                    <RewardOfferings rewardsData={rewardsData} onPendingChange={handleRewardsPendingChange} originalRewardToggles={originalRewardToggles} onEditClick={handleEditClick} />\n                    <DefaultRewards defaultRewardsData={defaultRewardsData} onDefaultRewardsPendingChange={handleDefaultRewardsPendingChange} originalDefaultRewardsToggles={originalDefaultRewardsToggles} />\n                </RewardOfferingsAndSettings>\n        </FlexDiv>\n    );\n}\n\nexport default Rewards;","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/store/store.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/ToggleSwitch.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/types/DefaultRewardData.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/types/RewardData.ts",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/CancelIcon.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/atoms/Toast.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/CheckCircleIcon.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/ErrorIcon.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/subatomic/Icons/InformationIcon.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/DefaultRewardItem.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/DefaultRewards.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/organism/EditRewardForm.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/WebSocketContext.tsx",["167"],[],"import React, { createContext, useContext, useEffect, ReactNode } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\ninterface WebSocketContextProps {\n  socket: Socket;\n}\n\ninterface WebSocketProviderProps {\n  children: ReactNode;\n}\n\nconst WebSocketContext = createContext<WebSocketContextProps | null>(null);\n\nexport const useWebSocket = () => {\n  return useContext(WebSocketContext);\n};\n\nexport const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ children }) => {\n  const socket = io('http://localhost:5000');\n\n  useEffect(() => {\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  return (\n    <WebSocketContext.Provider value={{ socket }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};","/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/pages/_app.tsx",[],[],"/Users/us-guest/Desktop/git_projects/orbitt-next/client/src/components/molecules/BottomSaveNotice.tsx",[],[],{"ruleId":"168","severity":1,"message":"169","line":11,"column":6,"nodeType":"170","endLine":11,"endColumn":8,"suggestions":"171"},{"ruleId":"168","severity":1,"message":"172","line":262,"column":4,"nodeType":"170","endLine":262,"endColumn":6,"suggestions":"173"},{"ruleId":"168","severity":1,"message":"174","line":25,"column":6,"nodeType":"170","endLine":25,"endColumn":8,"suggestions":"175"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["176"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["177"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["178"],{"desc":"179","fix":"180"},{"desc":"179","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [fetchData]",{"range":"184","text":"185"},{"range":"186","text":"185"},"Update the dependencies array to be: [socket]",{"range":"187","text":"188"},[271,273],"[fetchData]",[8197,8199],[612,614],"[socket]"]